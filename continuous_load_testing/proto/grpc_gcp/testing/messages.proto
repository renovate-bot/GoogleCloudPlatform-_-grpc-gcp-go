// Message definitions to be used by integration test service definitions.

syntax = "proto3";

package grpc_gcp.testing;
option go_package = "github.com/GoogleCloudPlatform/grpc-gcp-go/continuous_load_testing/proto/grpc_gcp/testing/messages;messages";


message BoolValue {
  // The bool value.
  bool value = 1;
}

// The type of payload that should be returned.
enum PayloadType {
  // Compressable text format.
  PAYLOAD_TYPE_UNSPECIFIED = 0;
  COMPRESSABLE = 1;
}

// A block of data, to simply increase gRPC message size.
message Payload {
  // The type of data in body.
  PayloadType type = 1;

  // Primary contents of payload.
  bytes body = 2;
}

// A protobuf representation for grpc status. This is used by test
// clients to specify a status that the server should attempt to return.
message EchoStatus {
  int32 code = 1;
  string message = 2;
}

// The type of route that a client took to reach a server w.r.t. gRPCLB.
// The server must fill in "fallback" if it detects that the RPC reached
// the server via the "gRPCLB fallback" path, and "backend" if it detects
// that the RPC reached the server via "gRPCLB backend" path (i.e. if it got
// the address of this server from the gRPCLB server BalanceLoad RPC). Exactly
// how this detection is done is context and server dependent.
enum GrpclbRouteType {
  // Server didn't detect the route that a client took to reach it.
  GRPCLB_ROUTE_TYPE_UNKNOWN = 0;

  // Indicates that a client reached a server via gRPCLB fallback.
  GRPCLB_ROUTE_TYPE_FALLBACK = 1;

  // Indicates that a client reached a server as a gRPCLB-given backend.
  GRPCLB_ROUTE_TYPE_BACKEND = 2;
}

// Unary request.
message SimpleRequest {
  // Desired payload type in the response from the server.
  // If response_type is RANDOM, server randomly chooses one from other formats.
  PayloadType response_type = 1;

  // Desired payload size in the response from the server.
  int32 response_size = 2;

  // Optional input payload sent along with the request.
  Payload payload = 3;
}

// Unary response, as configured by the request.
message SimpleResponse {
  // Payload to increase message size.
  Payload payload = 1;
}

// Client-streaming request.
message StreamingInputCallRequest {
  // Optional input payload sent along with the request.
  Payload payload = 1;

  // Whether the server should expect this request to be compressed. This field
  // is "nullable" in order to interoperate seamlessly with servers not able to
  // implement the full compression tests by introspecting the call to verify
  // the request's compression status.
  BoolValue expect_compressed = 2;

  // Not expecting any payload from the response.
}

// Client-streaming response.
message StreamingInputCallResponse {
  // Aggregated size of payloads received from the client.
  int32 aggregated_payload_size = 1;
}

// Configuration for a particular response.
message ResponseParameters {
  // Desired payload sizes in responses from the server.
  int32 size = 1;

  // Desired interval between consecutive responses in the response stream in
  // microseconds.
  int32 interval_us = 2;

  // Whether to request the server to compress the response. This field is
  // "nullable" in order to interoperate seamlessly with clients not able to
  // implement the full compression tests by introspecting the call to verify
  // the response's compression status.
  BoolValue compressed = 3;
}

// Metrics data the server will update and send to the client. It mirrors orca
// load report
// https://github.com/cncf/xds/blob/eded343319d09f30032952beda9840bbd3dcf7ac/xds/data/orca/v3/orca_load_report.proto#L15,
// but avoids orca dependency. Used by both per-query and out-of-band reporting
// tests.
message TestOrcaReport {
  double cpu_utilization = 1;
  double memory_utilization = 2;
  map<string, double> request_cost = 3;
  map<string, double> utilization = 4;
}

// Server-streaming request.
message StreamingOutputCallRequest {
  // Desired payload type in the response from the server.
  // If response_type is RANDOM, the payload from each response in the stream
  // might be of different types. This is to simulate a mixed type of payload
  // stream.
  PayloadType response_type = 1;

  // Configuration for each expected response message.
  repeated ResponseParameters response_parameters = 2;

  // Optional input payload sent along with the request.
  Payload payload = 3;

  // Whether server should return a given status
  EchoStatus response_status = 7;

  // If set the server should update this metrics report data at the OOB server.
  TestOrcaReport orca_oob_report = 8;
}

// Server-streaming response, as configured by the request and parameters.
message StreamingOutputCallResponse {
  // Payload to increase response size.
  Payload payload = 1;
}
